{"version":3,"file":"component---src-pages-index-tsx-a4f0ee0c30ab47bb0939.js","mappings":"kLAOMA,GAAOC,EAAAA,EAAAA,KAAS,kBAAM,6DAAwB,CAClDC,iBAAkB,SAACC,GAAD,OAAgBA,EAAWH,QAGzCI,EAAcC,EAAAA,QAAAA,QAAAA,WAAH,8DAAGA,CAAH,oEAOXC,EAAaD,EAAAA,QAAAA,OAAAA,WAAH,6DAAGA,CAAH,yBAIVE,GAAYF,EAAAA,EAAAA,SAAOG,EAAAA,MAAV,uEAAGH,CAAH,8EASTI,EAAkBJ,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,oEAMfK,EAAmBL,EAAAA,QAAAA,IAAAA,WAAH,mEAAGA,CAAH,yCAKhBM,EAAoBN,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,0DAMjBO,GAAaP,EAAAA,EAAAA,SAAOL,GAAV,wEAAGK,CAAH,sBAMVQ,GAAaR,EAAAA,EAAAA,SAAOL,GAAV,wEAAGK,CAAH,2BAMVS,EAAaT,EAAAA,QAAAA,OAAAA,WAAH,6DAAGA,CAAH,sBA8FhB,UArEkB,SAAC,GAAyB,IAAvBU,EAAuB,EAAvBA,KACnB,OACE,gBAAC,IAAD,CAAQC,MAAM,aAAaC,OAAK,GAC7BF,EAAKG,OAAOC,MAAMC,KAAI,SAACC,GAAD,OACrB,gBAACjB,EAAD,CAAakB,IAAKD,EAAKE,IACrB,gBAACjB,EAAD,KACE,gBAACC,EAAD,CAAWiB,GAAE,SAAWH,EAAKI,MAC3B,gBAACzB,EAAD,CAAM0B,KAAK,QAAQC,aAAW,GAC3BN,EAAKO,YAAYZ,QAItB,gBAACP,EAAD,KACE,gBAACC,EAAD,KACE,gBAACE,EAAD,CAAYc,KAAK,OAAOC,aAAW,GAChCN,EAAKO,YAAYC,QAEnBR,EAAKO,YAAYE,aAChB,gBAAC9B,EAAD,CAAM0B,KAAK,OAAOC,aAAW,GAC1BN,EAAKO,YAAYE,cAKxB,gBAACnB,EAAD,KACE,gBAACE,EAAD,CAAYa,KAAK,OAAOC,aAAW,GAAnC,iBACiBN,EAAKU,WADtB,QAGA,gBAAC/B,EAAD,CAAM0B,KAAK,OAAOC,aAAW,GAC1BN,EAAKO,YAAYI,SAM1B,gBAAChC,EAAD,CAAM0B,KAAK,QAAQL,EAAKY,SAExB,gBAACnB,EAAD,KACE,gBAAC,EAAAN,KAAD,CAAMgB,GAAE,SAAWH,EAAKI,MACtB,gBAACzB,EAAD,CAAM0B,KAAK,OAAOQ,GAAG,QAArB","sources":["webpack://evolux-tech-blog/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Loadable from '@loadable/component';\nimport { graphql, Link } from 'gatsby';\n\nimport Layout from '../components/layout';\n\nconst Text = Loadable(() => import('evolux-ui-v2'), {\n  resolveComponent: (components) => components.Text,\n});\n\nconst PostWrapper = styled.article`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 40px;\n`;\n\nconst PostHeader = styled.header`\n  margin-bottom: 40px;\n`;\n\nconst PostTitle = styled(Link)`\n  && {\n    .ev2-text--title {\n      font-size: calc(1.5rem + 1vw);\n    }\n    text-decoration: none;\n  }\n`;\n\nconst CaptionsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst CaptionsLeftSide = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CaptionsRightSide = styled.div`\n  display: flex;\n  text-align: right;\n  flex-direction: column;\n`;\n\nconst AuthorName = styled(Text)`\n  && {\n    flex-grow: 1;\n  }\n`;\n\nconst TimeToRead = styled(Text)`\n  && {\n    text-align: right;\n  }\n`;\n\nconst PostFooter = styled.footer`\n  margin-top: 40px;\n`;\n\ntype MDXPostExcerpt = {\n  frontmatter: {\n    date: string;\n    title: string;\n    author: string;\n    authorEmail?: string;\n  };\n  id: string;\n  excerpt: string;\n  timeToRead: number;\n  slug: string;\n};\n\ntype IndexProps = {\n  data: {\n    allMdx: {\n      nodes: MDXPostExcerpt[];\n    };\n  };\n};\n\nconst IndexPage = ({ data }: IndexProps) => {\n  return (\n    <Layout title=\"Blog Posts\" index>\n      {data.allMdx.nodes.map((post) => (\n        <PostWrapper key={post.id}>\n          <PostHeader>\n            <PostTitle to={`/blog/${post.slug}`}>\n              <Text type=\"title\" transparent>\n                {post.frontmatter.title}\n              </Text>\n            </PostTitle>\n\n            <CaptionsWrapper>\n              <CaptionsLeftSide>\n                <AuthorName type=\"body\" transparent>\n                  {post.frontmatter.author}\n                </AuthorName>\n                {post.frontmatter.authorEmail && (\n                  <Text type=\"body\" transparent>\n                    {post.frontmatter.authorEmail}\n                  </Text>\n                )}\n              </CaptionsLeftSide>\n\n              <CaptionsRightSide>\n                <TimeToRead type=\"body\" transparent>\n                  Time to read: {post.timeToRead} min\n                </TimeToRead>\n                <Text type=\"body\" transparent>\n                  {post.frontmatter.date}\n                </Text>\n              </CaptionsRightSide>\n            </CaptionsWrapper>\n          </PostHeader>\n\n          <Text type=\"body\">{post.excerpt}</Text>\n\n          <PostFooter>\n            <Link to={`/blog/${post.slug}`}>\n              <Text type=\"link\" as=\"span\">\n                Read more\n              </Text>\n            </Link>\n          </PostFooter>\n        </PostWrapper>\n      ))}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      nodes {\n        frontmatter {\n          date(formatString: \"DD/MM/YYYY\")\n          title\n          author\n          authorEmail\n        }\n        id\n        excerpt\n        timeToRead\n        slug\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["Text","Loadable","resolveComponent","components","PostWrapper","styled","PostHeader","PostTitle","Link","CaptionsWrapper","CaptionsLeftSide","CaptionsRightSide","AuthorName","TimeToRead","PostFooter","data","title","index","allMdx","nodes","map","post","key","id","to","slug","type","transparent","frontmatter","author","authorEmail","timeToRead","date","excerpt","as"],"sourceRoot":""}